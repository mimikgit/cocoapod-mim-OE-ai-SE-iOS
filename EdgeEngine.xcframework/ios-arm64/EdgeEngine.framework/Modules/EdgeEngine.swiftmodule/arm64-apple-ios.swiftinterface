// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-upcoming-feature ConciseMagicFile -enable-upcoming-feature ForwardTrailingClosures -enable-upcoming-feature DeprecateApplicationMain -enable-upcoming-feature ImportObjcForwardDeclarations -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature IsolatedDefaultValues -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature ImplicitOpenExistentials -enable-upcoming-feature ExistentialAny -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name EdgeEngine
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Alamofire
import EdgeCore
@_exported import EdgeEngine
import Foundation
import Swift
import SwiftyJSON
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension EdgeCore.EdgeClient : EdgeCore.EdgeEngineClient {
  public static func configureRuntimePort(to port: Swift.Int32) throws
  @available(*, deprecated, renamed: "configureRuntimePort(to:)")
  public static func setCustomPort(number: Swift.Int32) -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func expectedRuntimeVersion() -> Swift.String
  @available(*, deprecated, renamed: "expectedRuntimeVersion")
  public static func expectedEdgeEngineVersion() -> Swift.String
  public static func manageRuntimeLifecycle(manage: Swift.Bool) throws
  @available(*, deprecated, renamed: "manageRuntimeLifecycle")
  public static func manageEdgeEngineLifecycle(manage: Swift.Bool) -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func startRuntime(parameters: EdgeCore.EdgeClient.RuntimeParameters) async throws
  @available(*, deprecated, renamed: "startRuntime")
  final public func startEdgeEngine(parameters: EdgeCore.EdgeClient.StartupParameters) async -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func stopRuntime()
  @available(*, deprecated, renamed: "stopRuntime")
  final public func stopEdgeEngine()
  public static func restartRuntime() async throws
  @available(*, deprecated, renamed: "restartRuntime")
  final public func restartEdgeEngine() async -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func resetRuntime() throws
  @available(*, deprecated, renamed: "resetRuntime")
  final public func resetEdgeEngine() -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func runtimeIsRunning() -> Swift.Bool
  @available(*, deprecated, renamed: "runtimeIsRunning")
  final public func edgeEngineIsRunning() -> Swift.Bool
  public static func runtimeParameters() -> EdgeCore.EdgeClient.RuntimeParameters?
  @available(*, deprecated, renamed: "runtimeParameters")
  final public func edgeEngineParameters() -> EdgeCore.EdgeClient.StartupParameters?
  public static func runtimeLifecycleIsManaged() -> Swift.Bool
  @available(*, deprecated, renamed: "runtimeLifecycleIsManaged")
  final public func edgeEngineLifecycleIsManaged() -> Swift.Bool
}
